name: Alerts to Discord

on:
  push:
    branches: ["**"]
  pull_request:
    types: [closed]

jobs:
  notify:
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main')
    runs-on: ubuntu-latest

    steps:
      - name: Preparar mensagem
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            ACTION="commit"
            TARGET="${{ github.ref_name }}"
            TITLE="${{ github.event.head_commit.message }}"
            LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          else
            ACTION="merge"
            TARGET="main"
            TITLE="${{ github.event.pull_request.title }}"
            LINK="${{ github.event.pull_request.html_url }}"
          fi
          TEXT="[${ACTION}] repo=${{ github.repository }} target=${TARGET} actor=${{ github.actor }} title='${TITLE}' â†’ ${LINK} | run ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "text=$TEXT" >> "$GITHUB_OUTPUT"

      - name: Enviar para o Discord (Webhook)
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          MSG: ${{ steps.vars.outputs.text }}
        run: |
          python3 - <<'PY'
          import json, os, urllib.request
          payload = json.dumps({"content": os.environ["MSG"]}).encode("utf-8")
          req = urllib.request.Request(os.environ["WEBHOOK"], data=payload, headers={"Content-Type": "application/json"})
          with urllib.request.urlopen(req) as r:
              print(r.read().decode())
          PY
